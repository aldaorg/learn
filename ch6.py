# -*- coding: utf-8 -*-
"""CH6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lyds69WkVtwqpaCmd62suoPtpI6DW0hz
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from sklearn.datasets import load_boston
dataset = load_boston()
print(dataset.data)

print(dataset.feature_names)
print(dataset.DESCR)

df = pd.DataFrame(dataset.data, columns=dataset.feature_names)
df.head()

df['MEDV'] = dataset.target
df.head()

print(df.isnull().sum())

corr = df.corr()
print(corr)

print(df.corr().abs().nlargest(3, 'MEDV').values[:3])

print(df.corr().abs().nlargest(3, 'MEDV').values[:13])

plt.scatter(df['LSTAT'], df["MEDV"])
plt.xlabel('LSTAT')
plt.ylabel('MEDV')

from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure(figsize=(18,15))
ax = fig.add_subplot(111,projection = '3d')

ax.scatter(df['LSTAT'], df['RM'], df['MEDV'], c='b')
ax.set_xlabel("LSTAT")
ax.set_ylabel('R')
ax.set_zlabel('MEDV')
plt.show()

x = pd.DataFrame(np.c_[df['LSTAT'], df['RM']], columns = ['LSTAT', 'RM'])
y=df['MEDV']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size =.3, random_state=5)

print(x_train.shape)
print(y_train.shape)

print(x_test.shape)
print(y_test.shape)

from sklearn.linear_model import LinearRegression
model= LinearRegression()
model.fit(x_train, y_train)

price_pred = model.predict(x_test)
print('R-Squared: %4f' %model.score(x_test, y_test))

from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, price_pred)
print(mse)
plt.scatter(y_test, price_pred)
plt.xlabel("Actual Prices")
plt.ylabel('Predicted')
plt.title("Actual vs. Predicted")

print(model.intercept_)
print(model.coef_)

print(model.predict([[30,5]]))

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

from sklearn.datasets import load_boston
dataset = load_boston()

df=pd.DataFrame(dataset.data, columns=dataset.feature_names)
df['MEDV'] = dataset.target
x=pd.DataFrame(np.c_[df['LSTAT'], df['RM']], columns = ['LSTAT','RM'])
y=df['MEDV']
fig=plt.figure(figsize=(18,15))
ax=fig.add_subplot(111, projection='3d')

ax.scatter(x['LSTAT'], x['RM'], y, c='b')
ax.set_xlabel('LSTAT')
ax.set_ylabel('RM')
ax.set_zlabel('MEDV')

x_surf = np.arange(0,40,1)
y_surf = np.arange(0,10,1)
z_surf, y_surf =np.meshgrid(x_surf, y_surf)

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x,y)

z=lambda x,y:(model.intercept_ + model.coef_[0] * x + model.coef_[1] *y)

ax.plot_surface(x_surf, y_surf, z(x_surf,y_surf),
                rstride=1,
                cstride=1,
                color='None',
                alpha=.4)
plt.show()

import pandas as pd
import csv
with open('polynomial.csv', 'w', newline='') as file:
  writer=csv.writer(file)
  writer.writerow(['x','y'])
  writer.writerow([1.5,1.5])
  writer.writerow([2,2.5])
  writer.writerow([3,4])
  writer.writerow([4,4])
  writer.writerow([5,4.5])
  writer.writerow([6,5])


df=pd.read_csv("polynomial.csv")
plt.scatter(df.x, df.y)

model = LinearRegression()
x=df.x[0:6, np.newaxis]
y=df.y[0:6, np.newaxis]

model.fit(x,y)

y_pred=model.predict(x)
plt.scatter(x, y_pred, color='r')
plt.scatter(x,y, s=10, color ='b')
plt.plot(x,y_pred, color='r')
plt.show()
print('R squared %.4f' %model.score(x,y))

from sklearn.preprocessing import PolynomialFeatures
degree=2
polynomial_features = PolynomialFeatures(degree = degree)

x_poly = polynomial_features.fit_transform(x)
print(x_poly)

print(polynomial_features.get_feature_names('x'))

model = LinearRegression()
model.fit(x_poly,y)
y_poly_pred = model.predict(x_poly)

plt.scatter(x,y, s=10)
plt.plot(x, y_poly_pred)
plt.show()

print(model.intercept_)
print(model.coef_)

